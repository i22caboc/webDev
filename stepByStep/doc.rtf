{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red20\green69\blue101;\red59\green136\blue189;\red71\green119\blue29;
\red43\green105\blue145;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
(Los objetos de la base de datos se llaman modelo y se crean en python, as\'ed como las relaciones.\
)
\b\fs60 \expnd0\expndtw0\kerning0
\
Create a Django Project\

\b0\fs22 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
Start & Configuration\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs32 \cf0 \expnd0\expndtw0\kerning0
\
Create Project\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\i\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\fs20 \cf2 \expnd0\expndtw0\kerning0
$ django-admin startproject 
\f2\b \expnd0\expndtw0\kerning0
mySite
\f1\b0 \expnd0\expndtw0\kerning0
 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\i0\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Changing settings\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
In mysite/settings.py:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
TIME_ZONE = \'91Europe/Berlin'\
STATIC_ROOT = os.path.join(BASE_DIR, \'91static\'92)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Setup a database\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\b0\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py migrate\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Run Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\b0\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py runserver\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
Django Models\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs32 \cf0 \expnd0\expndtw0\kerning0
\
Creating an application\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
$ python manage.py startapp 
\f2\b \expnd0\expndtw0\kerning0
blog
\f1\b0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Now we add our new app to the list of installed apps in 
\i \expnd0\expndtw0\kerning0
mysite/settings.py:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\fs20 \cf2 \expnd0\expndtw0\kerning0
INSTALLED_APPS = (\
    \'85\'85\'85\
    \'85\'85\'85\
    '
\f2\b \expnd0\expndtw0\kerning0
blog
\f1\b0 \expnd0\expndtw0\kerning0
',\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Creating a blog post model\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
In 
\i \expnd0\expndtw0\kerning0
blog/models.py 
\i0 \expnd0\expndtw0\kerning0
create a class containing our desired model:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
from django.db import models\
from django.utils import timezone\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
class 
\f2\b \expnd0\expndtw0\kerning0
Post
\f1\b0 \expnd0\expndtw0\kerning0
(models.Model):\
    author = models.ForeignKey('auth.User')\
    title = models.CharField(max_length=200)\
    #For long text without a limit TextField\
    text = models.TextField()\
    created_date = models.DateTimeField(\
            default=timezone.now)\
    published_date = models.DateTimeField(\
            blank=True, null=True)\
\
    def publish(self):\
        self.published_date = timezone.now()\
        self.save()\
\
    def __str__(self):\
        return self.title\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Create tables for models in your database\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
The last step here is to add our new model to our database. First we have to make Django know that we have some changes in our model.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py makemigrations blog\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Django prepared for us a migration file that we have to apply now to our database.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py migrate blog\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\
Django admin\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
To add, edit and delete posts we've just modeled, we will use Django admin.\
\
Let's open the 
\i \expnd0\expndtw0\kerning0
blog/admin.py
\i0 \expnd0\expndtw0\kerning0
 file and replace its content with this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
from django.contrib import admin\
from .models import Post\
\
admin.site.register(Post)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
As you can see, we import the Post model defined in the previous chapter. To make our model visible on the admin page, we need to register the model with admin.site.register(Post).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
python manage.py runserver\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
OK, time to look at our Post model. Remember to run \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py runserver\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
in the console to run the web server. Go to the browser and type the address\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://127.0.0.1:8000/admin/"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 http://127.0.0.1:8000/admin/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
You will see the login page.\
To log in, you need to create a superuser. In the command-line type:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py createsuperuser\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
When prompted, type your username, email address, and password.\
Now you can log in with the superuser's credentials you chose.\
\
Go to Posts and experiment a little bit with it. You can now add blog posts.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
Django urls\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
We want 
\i \expnd0\expndtw0\kerning0
http://127.0.0.1:8000/
\i0 \expnd0\expndtw0\kerning0
  to be a homepage of our blog and display a list of posts.\
We will import urls from our blog application to the main 
\i \expnd0\expndtw0\kerning0
mysite/urls.py
\i0 \expnd0\expndtw0\kerning0
 file.\
\
Append to 
\i \expnd0\expndtw0\kerning0
urlpatterns 
\i0 \expnd0\expndtw0\kerning0
in 
\i \expnd0\expndtw0\kerning0
mysite/urls.py
\i0 \expnd0\expndtw0\kerning0
:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
url(r'', include(\'91blog.urls')),\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
blog.urls\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
Create a new 
\i \expnd0\expndtw0\kerning0
blog/urls.py
\i0 \expnd0\expndtw0\kerning0
 empty file. All right! Add these two first lines:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
from django.conf.urls import url\
from . import views\
\
urlpatterns = [\
    url(r'^$', views.post_list, name='post_list'),\
]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0 \cf0 \expnd0\expndtw0\kerning0
(There\'92s something weird here, in mysite/urls instead of a list the url function is inside a patterns() function )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Now we have to create a view so that we can see something in the browser.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Django views\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
A view is a place where we put the "logic" of our application. It will request information from the model you created before and pass it to a template. We'll create a template in the next chapter.\
\
Views are placed in the 
\i \expnd0\expndtw0\kerning0
views.py
\i0 \expnd0\expndtw0\kerning0
 file. We will add our views to the 
\i \expnd0\expndtw0\kerning0
blog/views.py
\i0 \expnd0\expndtw0\kerning0
 file.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
blog/views.py\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
The simplest view can look like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
def post_list(request):\
    return render(request, 'blog/post_list.html', \{\})\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
As you can see, we created a function that takes a request and returns a function 
\i \cf3 \expnd0\expndtw0\kerning0
render
\i0 \cf0 \expnd0\expndtw0\kerning0
 that will render our template 
\i \expnd0\expndtw0\kerning0
blog/post_list.html
\i0 \expnd0\expndtw0\kerning0
.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\
\
\
\
Introduction to HTML\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Templates\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
Creating a template means creating a template file.\
Templates are saved in
\i \expnd0\expndtw0\kerning0
 blog/templates/blog 
\i0 \expnd0\expndtw0\kerning0
directory. So first create a directory called templates inside your blog directory. Then create another directory called blog inside your templates directory.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs18 \cf0 \expnd0\expndtw0\kerning0
(You might wonder why we need two directories both called blog - as you will discover later, this is simply a useful naming convention that makes life easier when things start to get more complicated.)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs22 \cf0 \expnd0\expndtw0\kerning0
And now create a 
\i \expnd0\expndtw0\kerning0
post_list.html
\i0 \expnd0\expndtw0\kerning0
 file inside the 
\i \expnd0\expndtw0\kerning0
blog/templates/blog 
\i0 \expnd0\expndtw0\kerning0
directory.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
Django ORM and QuerySets\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
What is a QuerySet?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
A QuerySet is, in essence, a list of objects of a given Model. QuerySet allows you to read the data from the database, filter it and order it.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Django shell\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
To enter Django\'92s shell type:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
$ python manage.py shell\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
You're now in Django's interactive console. It's just like Python prompt but with some additional Django magic :). You can use all the Python commands here too, of course.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
All objects\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
Let's try to display all of our posts first. You can do that with the following command:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
from blog.models import Post\
Post.objects.all()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
It's a list of the posts we created earlier! We created these posts using the Django admin interface. But, now we want to create new posts using Python, so how do we do that?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
\
Create object in the CLI\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
Let's import User model first:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
from django.contrib.auth.models import User\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Lets see what users we have in our database and then get an instance of the user:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
User.objects.all()\
me = User.objects.get(username='ola')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Now you can create a new Post object in the database:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.create(author=me, title='Sample title', text='Test')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Hurray! Wanna check if it worked?\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.all()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Filter objects\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
A big part of QuerySets is an ability to filter them. Let's say, we want to find all posts User ola authored. We will use 
\i \expnd0\expndtw0\kerning0
filter
\i0 \expnd0\expndtw0\kerning0
 instead of 
\i \expnd0\expndtw0\kerning0
all
\i0 \expnd0\expndtw0\kerning0
 in 
\i \expnd0\expndtw0\kerning0
Post.objects.all()
\i0 \expnd0\expndtw0\kerning0
. In parentheses we will state what condition(s) a blog post needs to meet to end up in our queryset. In our situation it is author that is equal to 
\i \expnd0\expndtw0\kerning0
me
\i0 \expnd0\expndtw0\kerning0
. The way to write it in Django is: 
\i \expnd0\expndtw0\kerning0
author=me
\i0 \expnd0\expndtw0\kerning0
. Now our piece of code looks like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.filter(author=me)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Or maybe we want to see all the posts that contain a word 'title' in the title field?\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.filter(title__contains='title')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\i \cf4 \expnd0\expndtw0\kerning0
    There are two underscore characters (_) between title and contains. Django's ORM uses this rule to separate field names ("title") and operations or filters ("contains"). If you only use one underscore, you'll get an error like "FieldError: Cannot resolve keyword title_contains".\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\i0 \cf0 \expnd0\expndtw0\kerning0
You can also get a list of all published posts. We do it by filtering all the posts that have 
\i \expnd0\expndtw0\kerning0
published_date
\i0 \expnd0\expndtw0\kerning0
 set in the past:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
from django.utils import timezone\
Post.objects.filter(published_date__let=timezone.now())\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
Unfortunately, the post we added from the Python console is not published yet. We can change that! First get an instance of a post we want to publish:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
post = Post.objects.get(title="Sample title")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
And then publish it with our publish method!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
post.publish()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Now try to get list of published posts again:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.filter(published_date__lte=timezone.now())\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Ordering objects\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
QuerySets also allow you to order the list of objects. Let's try to order them by 
\i \expnd0\expndtw0\kerning0
created_date
\i0 \expnd0\expndtw0\kerning0
 field:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.order_by('created_date')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
We can also reverse the ordering by adding - at the beginning:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.order_by(\'91-created_date')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Or we can reverse using python\'92s functions for lists:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.order_by(\'91created_date\'92).reverse()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Chaining QuerySets\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
You can also combine QuerySets by chaining them together:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
This is really powerful and lets you write quite complex queries.\
\
Cool! You're now ready for the next part! To close the shell, type this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
exit()\
$\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Dynamic data in templates\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f3\b0\fs18 \cf0 \expnd0\expndtw0\kerning0
\
Despite having its own nomenclature, such as naming the callable objects generating the HTTP responses "views", the core Django framework can be seen as MVC. It consists of an object-relational mapper (ORM) which mediates between data models (defined as Python classes) and a relational database ("Model"); a system for processing HTTP requests with a web templating system ("View") and a regular-expression-based URL dispatcher ("Controller").\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
 We have different pieces in place: the Post model is defined in 
\i \expnd0\expndtw0\kerning0
models.py
\i0 \expnd0\expndtw0\kerning0
, we have
\i \expnd0\expndtw0\kerning0
 post_list 
\i0 \expnd0\expndtw0\kerning0
in 
\i \expnd0\expndtw0\kerning0
views.py 
\i0 \expnd0\expndtw0\kerning0
and the template added. But how will we actually make our posts appear in our HTML template? (What we want to do is take some content (models saved in the database) and display it nicely in our template).\
\
This is exactly what views are supposed to do: connect models and templates. In our 
\i \expnd0\expndtw0\kerning0
post_list
\i0 \expnd0\expndtw0\kerning0
 view we will need to take models we want to display and pass them to the template. In a view we decide what (model) will be displayed in a template.\
\
Now we have to include in 
\i \expnd0\expndtw0\kerning0
views.py
\i0 \expnd0\expndtw0\kerning0
 the model we wrote in 
\i \expnd0\expndtw0\kerning0
models.py
\i0 \expnd0\expndtw0\kerning0
.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
QuerySet\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
You should already be familiar with how QuerySets work. We talked about it in Django ORM (QuerySets) chapter.\
\
So now we want published blog posts sorted by 
\i \expnd0\expndtw0\kerning0
published_date
\i0 \expnd0\expndtw0\kerning0
, right? We already did that in QuerySets chapter!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Now we put this piece of code inside the 
\i \expnd0\expndtw0\kerning0
blog/views.py
\i0 \expnd0\expndtw0\kerning0
 file by adding it to the function 
\i \expnd0\expndtw0\kerning0
def post_list(request).\
\

\i0 \expnd0\expndtw0\kerning0
The last missing part is passing the 
\i \expnd0\expndtw0\kerning0
posts
\i0 \expnd0\expndtw0\kerning0
 QuerySet to the template. Don't worry we will cover how to display it in a next chapter.\
\
In the 
\i \expnd0\expndtw0\kerning0
render
\i0 \expnd0\expndtw0\kerning0
 function we already have parameter with 
\i \expnd0\expndtw0\kerning0
request
\i0 \expnd0\expndtw0\kerning0
 (a request from the Internet) and a template file '
\i \expnd0\expndtw0\kerning0
blog/post_list.html
\i0 \expnd0\expndtw0\kerning0
'. In last parameter, a dictionary, we can add things for the template to use.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Django templates\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\
Time to display some data! Django gives us some helpful built-in template tags for that.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
What are template tags?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
You see, in HTML, you can't really write Python code, because browsers don't understand it. They only know HTML. We know that HTML is rather static, while Python is much more dynamic.\
\
Django template tags allow us to transfer Python-like things into HTML, so you can build dynamic websites faster and easier. Yikes!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Display post list template\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
In the previous chapter we gave our template a list of 
\i \expnd0\expndtw0\kerning0
posts
\i0 \expnd0\expndtw0\kerning0
 in the posts variable. Now we will display it in HTML.\
\
To print a variable in Django templates, we use double curly brackets with the variable's name inside, like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\{\{ posts \}\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
It works! But we want them to be displayed like the static posts we created earlier in the Introduction to HTML chapter. You can mix HTML and template tags. Our 
\i \expnd0\expndtw0\kerning0
body
\i0 \expnd0\expndtw0\kerning0
 will look like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
<div>\
    <h1><a href="/">Django Girls Blog</a></h1>\
</div>\
\
\{% for post in posts %\}\
    <div>\
        <p>published: \{\{ post.published_date \}\}</p>\
        <h1><a href="">\{\{ post.title \}\}</a></h1>\
        <p>\{\{ post.text|linebreaks \}\}</p>\
    </div>\
\{% endfor %\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Have you noticed that we used a slightly different notation this time 
\i \expnd0\expndtw0\kerning0
\{\{ post.title \}\}
\i0 \expnd0\expndtw0\kerning0
 or 
\i \expnd0\expndtw0\kerning0
\{\{ post.text \}\}
\i0 \expnd0\expndtw0\kerning0
? We are accessing data in each of the fields defined in our 
\i \expnd0\expndtw0\kerning0
Post
\i0 \expnd0\expndtw0\kerning0
 model. Also the 
\f1\i\fs20 \cf5 \expnd0\expndtw0\kerning0
|linebreaks
\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
 is piping the posts' text through a filter to convert line-breaks into paragraphs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
CSS - make it pretty!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
Our blog still looks pretty ugly, right? Time to make it nice! We will use CSS for that.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Install Bootstrap\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
To install Bootstrap, you need to add this to your 
\i \expnd0\expndtw0\kerning0
<head>
\i0 \expnd0\expndtw0\kerning0
 in your 
\i \expnd0\expndtw0\kerning0
.html
\i0 \expnd0\expndtw0\kerning0
 file (
\i \expnd0\expndtw0\kerning0
blog/templates/blog/post_list.html
\i0 \expnd0\expndtw0\kerning0
):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">\
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
This doesn't add any files to your project. It just points to files that exist on the internet. Just go ahead, open your website and refresh the page.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Your first CSS file!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
Let's create a CSS file now, to add your own style to your web-page. Create a new directory called 
\i \expnd0\expndtw0\kerning0
css
\i0 \expnd0\expndtw0\kerning0
 inside your 
\i \expnd0\expndtw0\kerning0
static
\i0 \expnd0\expndtw0\kerning0
 directory. Then create a new file called 
\i \expnd0\expndtw0\kerning0
blog.css
\i0 \expnd0\expndtw0\kerning0
 inside 
\i \expnd0\expndtw0\kerning0
blog/static/css
\i0 \expnd0\expndtw0\kerning0
 directory.\
\
In your 
\i \expnd0\expndtw0\kerning0
blog/static/css/blog.css
\i0 \expnd0\expndtw0\kerning0
 file you should add the following code:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
h1 a \{\
    color: #FCA205;\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\'85..\
\
Then, we need to also tell our HTML template that we added some CSS. Open the 
\i \expnd0\expndtw0\kerning0
blog/templates/blog/post_list.html
\i0 \expnd0\expndtw0\kerning0
 file and add this line at the very beginning of it:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\{% load staticfiles %\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\i0 \cf0 \expnd0\expndtw0\kerning0
We're just loading static files here :). Between the 
\i \expnd0\expndtw0\kerning0
<head> 
\i0 \expnd0\expndtw0\kerning0
and
\i \expnd0\expndtw0\kerning0
 </head>
\i0 \expnd0\expndtw0\kerning0
, after the links to the Bootstrap CSS files add this line:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
<link rel="stylesheet" href="\{% static 'css/blog.css' %\}">\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
Nice work! Maybe we would also like to give our website a little air and increase the margin on the left side? Let's try this!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
body \{\
    padding-left: 15px;\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
Maybe we can customize the font in our header? Paste this into your 
\i \expnd0\expndtw0\kerning0
<head>
\i0 \expnd0\expndtw0\kerning0
 in 
\i \expnd0\expndtw0\kerning0
blog/templates/blog/post_list.html
\i0 \expnd0\expndtw0\kerning0
 file:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
<link href="http://fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext" rel="stylesheet" type="text/css">\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
This line will import a font called Lobster from Google Fonts.\
\
Find the h1 a declaration block (the code between braces \{ and \}) in the CSS file `blog/static/css/blog.css. Now add the line font-family: 'Lobster'; between the braces, and refresh the page:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
h1 a \{\
    color: #FCA205;\
    font-family: 'Lobster';\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
(Muchas cosas de css en poco tiempo, no se ni como resumir)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f1\i\fs20 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\i0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Template extending\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\fs32 \cf0 \expnd0\expndtw0\kerning0
Create base template\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\b0\fs22 \cf0 \expnd0\expndtw0\kerning0
\
A base template is the most basic template that you extend on every page of your website.\
\
Let's create a base.html file in blog/templates/blog/.}